name: Deploy Infrastructure (CD Only)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force redeploy all infrastructure components'
        required: false
        default: false
        type: boolean

jobs:
  validate:
    name: Validate Infrastructure Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Validate all YAML manifests
      run: |
        echo "🔍 Validating Kubernetes manifests..."
        find k8s -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "Validating: $file"
          kubectl apply --dry-run=client --validate=true -f "$file" || {
            echo "❌ Validation failed for: $file"
            exit 1
          }
        done
        echo "✅ All manifests are valid!"
    
    - name: Check for required secrets
      run: |
        echo "🔍 Checking for required configurations..."
        
        # Check if AWS secrets template exists
        if [ -f "k8s/secrets/aws-secrets.yaml" ]; then
          echo "✅ AWS secrets template found"
          
          # Check if it contains placeholder values
          if grep -q "AWS_ACCESS_KEY_ID: \"\"" k8s/secrets/aws-secrets.yaml; then
            echo "⚠️  AWS secrets contain empty values - make sure to configure them before deployment"
          else
            echo "✅ AWS secrets appear to be configured"
          fi
        else
          echo "❌ AWS secrets template not found"
          exit 1
        fi
        
        # Check MySQL secrets
        if [ -f "k8s/secrets/mysql-secrets.yaml" ]; then
          echo "✅ MySQL secrets template found"
        else
          echo "❌ MySQL secrets template not found"
          exit 1
        fi

  deploy:
    name: Deploy Infrastructure
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Verify cluster connection
      run: |
        echo "🔍 Verifying cluster connection..."
        kubectl cluster-info
        kubectl get nodes
        echo "✅ Cluster connection verified!"
    
    - name: Deploy infrastructure components
      run: |
        echo "🚀 Starting Bedrock Chat Infrastructure Deployment..."
        cd k8s
        
        echo "📁 Step 1: Creating namespace..."
        kubectl apply -f namespace.yaml
        echo "✅ Namespace created/updated"
        
        echo "🔐 Step 2: Creating secrets..."
        kubectl apply -f secrets/
        echo "✅ Secrets created/updated"
        
        echo "💾 Step 3: Creating persistent volumes..."
        kubectl apply -f pv/
        echo "✅ Persistent volumes created/updated"
        
        echo "🗄️ Step 4: Deploying MySQL..."
        kubectl apply -f mysql/
        echo "✅ MySQL components deployed"
        
        echo "🌐 Step 5: Applying network policies..."
        kubectl apply -f network-policies/
        echo "✅ Network policies applied"
        
        echo "📊 Step 6: Setting up monitoring and resource quotas..."
        kubectl apply -f monitoring/
        echo "✅ Monitoring and quotas configured"
        
        echo "🌍 Step 7: Deploying ingress..."
        kubectl apply -f ingress/
        echo "✅ Ingress deployed"
        
        echo "🎉 Infrastructure deployment completed!"
    
    - name: Wait for MySQL readiness
      run: |
        echo "⏳ Waiting for MySQL to become ready..."
        
        # Wait for MySQL StatefulSet to be ready
        kubectl rollout status statefulset/mysql -n bedrock-chat --timeout=600s
        
        # Wait for MySQL pod to be ready
        kubectl wait --for=condition=ready pod -l app=mysql -n bedrock-chat --timeout=600s
        
        echo "✅ MySQL is ready!"
    
    - name: Verify infrastructure deployment
      run: |
        echo "🔍 Verifying infrastructure deployment..."
        
        echo "📋 Namespace status:"
        kubectl get namespace bedrock-chat -o wide
        
        echo "🔐 Secrets status:"
        kubectl get secrets -n bedrock-chat
        
        echo "💾 Storage status:"
        kubectl get pv,pvc -n bedrock-chat
        
        echo "🗄️ MySQL status:"
        kubectl get pods,svc,statefulset -n bedrock-chat -l app=mysql -o wide
        
        echo "🌐 Network policies:"
        kubectl get networkpolicies -n bedrock-chat
        
        echo "🌍 Ingress status:"
        kubectl get ingress -n bedrock-chat -o wide
        
        echo "📊 Resource quotas:"
        kubectl get resourcequota -n bedrock-chat
        
        echo "✅ Infrastructure verification completed!"
    
    - name: Test MySQL connectivity
      run: |
        echo "🔍 Testing MySQL connectivity..."
        
        # Test MySQL connection from within the cluster
        kubectl run mysql-test --image=mysql:8.0 --rm -i --restart=Never -n bedrock-chat -- \
          mysql -h mysql.bedrock-chat.svc.cluster.local -u root -pSecureRootPassword123! -e "SELECT 1;" || {
          echo "⚠️ MySQL connectivity test failed - this might be expected if custom passwords are used"
        }
        
        echo "✅ MySQL connectivity test completed"

  post-deploy:
    name: Post-Deployment Status
    needs: [validate, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Deployment Status Summary
      run: |
        echo "## 🎯 Bedrock Chat Infrastructure Deployment Summary"
        echo ""
        echo "### 📊 Job Status"
        echo "- **Validation**: ${{ needs.validate.result }}"
        echo "- **Deployment**: ${{ needs.deploy.result }}"
        echo ""
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "### ✅ Infrastructure Successfully Deployed!"
          echo ""
          echo "Your Bedrock Chat infrastructure is now ready. You can now deploy the microservices:"
          echo ""
          echo "### 🚀 Next Steps:"
          echo "1. **Deploy microservices** - Push code to each microservice repository"
          echo "2. **Configure AWS secrets** - Update the aws-secrets in the cluster if needed"
          echo "3. **Verify services** - Check that all services deploy and connect properly"
          echo ""
          echo "### 📋 Useful Commands:"
          echo "\`\`\`bash"
          echo "# Check all infrastructure components"
          echo "kubectl get all -n bedrock-chat"
          echo ""
          echo "# Monitor MySQL startup"
          echo "kubectl logs -f statefulset/mysql -n bedrock-chat"
          echo ""
          echo "# Check persistent storage"
          echo "kubectl get pv,pvc -n bedrock-chat"
          echo ""
          echo "# View ingress configuration"
          echo "kubectl get ingress -n bedrock-chat -o wide"
          echo "\`\`\`"
          echo ""
          echo "### 🌟 Infrastructure Components Ready:"
          echo "- ✅ Kubernetes namespace (bedrock-chat)"
          echo "- ✅ MySQL database with persistent storage"
          echo "- ✅ Secrets management (MySQL + AWS)"
          echo "- ✅ Network policies for security"
          echo "- ✅ Ingress for external access"
          echo "- ✅ Resource quotas and monitoring"
          echo ""
        else
          echo "### ❌ Infrastructure Deployment Failed!"
          echo ""
          echo "Please check the deployment logs above for error details."
          echo ""
          echo "### 🔧 Common Issues:"
          echo "- Verify KUBECONFIG secret is correctly configured"
          echo "- Ensure cluster has sufficient resources"
          echo "- Check if StorageClass 'local-path' is available"
          echo "- Verify ingress controller is installed"
          echo ""
        fi
        
        echo "### 📞 Support"
        echo "If you encounter issues, check the workflow logs and Kubernetes events:"
        echo "\`kubectl get events -n bedrock-chat --sort-by='.lastTimestamp'\`"

  notify-completion:
    name: Notify Infrastructure Ready
    needs: [deploy]
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'success'
    steps:
    - name: Infrastructure Ready Notification
      run: |
        echo "🎉 🎯 BEDROCK CHAT INFRASTRUCTURE IS READY!"
        echo ""
        echo "✅ All infrastructure components have been successfully deployed"
        echo "🚀 You can now proceed to deploy your microservices"
        echo ""
        echo "The following components are now available:"
        echo "- Kubernetes namespace: bedrock-chat"
        echo "- MySQL database with persistent storage"
        echo "- Network security policies"
        echo "- Ingress configuration for external access"
        echo "- Resource monitoring and quotas"
        echo ""
        echo "Ready for microservice deployments! 🌟"
